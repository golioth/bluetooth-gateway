From 93f49bd0b9e6f1fc9e64501eb4a982abbb37a771 Mon Sep 17 00:00:00 2001
From: Marcin Niestroj <m.niestroj@emb.dev>
Date: Thu, 17 Jul 2025 15:22:29 +0200
Subject: [PATCH] gateway: add server certificate get

Signed-off-by: Marcin Niestroj <m.niestroj@emb.dev>
---
 include/golioth/gateway.h | 11 ++++++
 src/gateway.c             | 71 +++++++++++++++++++++++++++++++++++++++
 2 files changed, 82 insertions(+)

diff --git a/include/golioth/gateway.h b/include/golioth/gateway.h
index 671df5d4..cf233373 100644
--- a/include/golioth/gateway.h
+++ b/include/golioth/gateway.h
@@ -67,6 +67,17 @@ enum golioth_status golioth_gateway_uplink_block(struct gateway_uplink *uplink,
 /// @param ctx The uplink context to finish, returned from \ref golioth_gateway_uplink_block
 void golioth_gateway_uplink_finish(struct gateway_uplink *uplink);
 
+/// Get server certificate.
+///
+/// @param client The client handle from @ref golioth_client_create
+/// @param buf Pointer to buffer where certificate will be written
+/// @param len Pointer to length. On input it is buffer length. On output it is certificate length.
+/// @param timeout_s Timeout in seconds for API call
+enum golioth_status golioth_gateway_server_cert_get(struct golioth_client *client,
+                                                    void *buf,
+                                                    size_t *len,
+                                                    int32_t timeout_s);
+
 #ifdef __cplusplus
 }
 #endif
diff --git a/src/gateway.c b/src/gateway.c
index 380c2f3d..2d2f6433 100644
--- a/src/gateway.c
+++ b/src/gateway.c
@@ -5,7 +5,9 @@
  */
 
 #include <golioth/gateway.h>
+#include <golioth/payload_utils.h>
 #include "coap_blockwise.h"
+#include "coap_client.h"
 
 #if defined(CONFIG_GOLIOTH_GATEWAY)
 
@@ -128,4 +130,73 @@ void golioth_gateway_uplink_finish(struct gateway_uplink *uplink)
     golioth_sys_free(uplink);
 }
 
+struct server_cert_context
+{
+    void *buf;
+    size_t len;
+    enum golioth_status status;
+};
+
+static void on_server_cert(struct golioth_client *client,
+                           enum golioth_status status,
+                           const struct golioth_coap_rsp_code *coap_rsp_code,
+                           const char *path,
+                           const uint8_t *payload,
+                           size_t payload_size,
+                           void *arg)
+{
+    struct server_cert_context *ctx = arg;
+
+    if (status != GOLIOTH_OK)
+    {
+        ctx->status = status;
+        return;
+    }
+
+    if (golioth_payload_is_null(payload, payload_size))
+    {
+        ctx->status = GOLIOTH_ERR_NULL;
+        return;
+    }
+
+    if (payload_size > ctx->len) {
+        ctx->status = GOLIOTH_ERR_MEM_ALLOC;
+        return;
+    }
+
+    memcpy(ctx->buf, payload, payload_size);
+    ctx->len = payload_size;
+}
+
+enum golioth_status golioth_gateway_server_cert_get(struct golioth_client *client,
+                                                    void *buf, size_t *len, int32_t timeout_s)
+
+{
+    enum golioth_status status;
+    struct server_cert_context ctx = {
+        .buf = buf,
+        .len = *len,
+    };
+
+    uint8_t token[GOLIOTH_COAP_TOKEN_LEN];
+    golioth_coap_next_token(token);
+
+    status = golioth_coap_client_get(client,
+                                   token,
+                                   ".g/server-cert",
+                                   "",
+                                   GOLIOTH_CONTENT_TYPE_OCTET_STREAM,
+                                   on_server_cert,
+                                   &ctx,
+                                   true,
+                                   timeout_s);
+    if (status != GOLIOTH_OK) {
+        return status;
+    }
+
+    *len = ctx.len;
+
+    return GOLIOTH_OK;
+}
+
 #endif  // CONFIG_GOLIOTH_GATEWAY
-- 
2.50.1

